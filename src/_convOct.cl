#include "_sift_kernel.h"
/********************************************************************************************************************/
/*              conv_oct kernel and sub modules                                                                      */
/*              INPUT: image and size of image                                                                      */
/*              OUT: write output of kernel to associated pipe                                                      */
/********************************************************************************************************************/

__attribute__ ((xcl_reqd_work_group_size(1,1,1)))
__attribute__ ((xcl_dataflow))
__kernel void conv_oct( global data_t *input, // pointer to input image
                        int height,
                        int width,
                        bool from_bram, // if TRUE: read input from bram, FALSE: read input from off chip global
                        )
{
    // doing 5 convolution, because of the dataflow pragma, they will run concurently
    // each conv module will do the convolution and write data to the correcspoding pipe
    // image size should be changed according to octave


    if (!from_bram){
    	CopyInputImageFromDRAM(input, _input_image, width, height); 
 	}
 	else{
 		// resize the output of conv2d_s2 in half
    	// it store the resized image into _input_image
    	resize(_input_image, height, width); // height and width is the img size of current octave
 	}

    conv2d_s0(_input_image, height, width);
    conv2d_s1(_input_image, height, width);
    // output of conv2d_s2 will be resized in half and transferred to next octave
    // so conv2d_s2 should write the output in both pipe and _intm_image
    conv2d_s2(_input_image, height, width);
    conv2d_s3(_input_image, height, width);
    conv2d_s4(_input_image, height, width);


}

/********************************************************************************************************************/
/*              Sub modules prototype here                                                                          */
/********************************************************************************************************************/

CopyInputImageFromDRAM(global data_t *input, global data_t *_input_image, int width,int height){

    COPY_INPUT_LOOP: for(int i = 0; i < width*height; ++i){
        _input_image[i] = input[i];
    }
}

// convolution kernel is same with all filter size, however, if the compiler know the value of 
// filter size at compile time then the hardware architecture will be much efficient.
// The idea is keep the code as simple as possible.
// In HLS, we can use template, then we dont need 5 seprate kernel

void conv2d_s0( global data_t *_input_image,
                int height,
                int width
            )
{
// This module will apply filter at filter_coef on _input_image
// Same for other conv2d modules
// Output need to be written to asscosiated pipe


// If assigning the filter values of global variables is not possible
// we have to define the filter valuse as local
// - eyoh
__local data_t filter_coef[FLEN0*FLEN0] = {0.000120, 0.000471, 0.001251, 0.002248, 0.002733, 0.002248, 0.001251, 0.000471, 0.000120,
                                           0.000471, 0.001849, 0.004910, 0.008822, 0.010725, 0.008822, 0.004910, 0.001849, 0.000471,
                                           0.001251, 0.004910, 0.013038, 0.023425, 0.028478, 0.023425, 0.013038, 0.004910, 0.001251,
                                           0.002248, 0.008822, 0.023425, 0.042088, 0.051165, 0.042088, 0.023425, 0.008822, 0.002248,
                                           0.002733, 0.010725, 0.028478, 0.051165, 0.062201, 0.051165, 0.028478, 0.010725, 0.002733,
                                           0.002248, 0.008822, 0.023425, 0.042088, 0.051165, 0.042088, 0.023425, 0.008822, 0.002248,
                                           0.001251, 0.004910, 0.013038, 0.023425, 0.028478, 0.023425, 0.013038, 0.004910, 0.001251,
                                           0.000471, 0.001849, 0.004910, 0.008822, 0.010725, 0.008822, 0.004910, 0.001849, 0.000471,
                                           0.000120, 0.000471, 0.001251, 0.002248, 0.002733, 0.002248, 0.001251, 0.000471, 0.000120};
__attribute__ ((xcl_array_partition(complete, 1))) 

}

void conv2d_s1( global data_t *_input_image,
                int height,
                int width
            )
{
__local data_t filter_coef[FLEN1*FLEN1] = {0.000236, 0.000567, 0.001124, 0.001832, 0.002455, 0.002707, 0.002455, 0.001832, 0.001124, 0.000567, 0.000236,
					   0.000567, 0.001366, 0.002707, 0.004411, 0.005913, 0.006519, 0.005913, 0.004411, 0.002707, 0.001366, 0.000567,
					   0.001124, 0.002707, 0.005362, 0.008738, 0.011713, 0.012914, 0.011713, 0.008738, 0.005362, 0.002707, 0.001124,
					   0.001832, 0.004411, 0.008738, 0.014239, 0.019086, 0.021044, 0.019086, 0.014239, 0.008738, 0.004411, 0.001832,
					   0.002455, 0.005913, 0.011713, 0.019086, 0.025583, 0.028207, 0.025583, 0.019086, 0.011713, 0.005913, 0.002455,
					   0.002707, 0.006519, 0.012914, 0.021044, 0.028207, 0.031101, 0.028207, 0.021044, 0.012914, 0.006519, 0.002707,
					   0.002455, 0.005913, 0.011713, 0.019086, 0.025583, 0.028207, 0.025583, 0.019086, 0.011713, 0.005913, 0.002455,
					   0.001832, 0.004411, 0.008738, 0.014239, 0.019086, 0.021044, 0.019086, 0.014239, 0.008738, 0.004411, 0.001832,
					   0.001124, 0.002707, 0.005362, 0.008738, 0.011713, 0.012914, 0.011713, 0.008738, 0.005362, 0.002707, 0.001124,
					   0.000567, 0.001366, 0.002707, 0.004411, 0.005913, 0.006519, 0.005913, 0.004411, 0.002707, 0.001366, 0.000567,
					   0.000236, 0.000567, 0.001124, 0.001832, 0.002455, 0.002707, 0.002455, 0.001832, 0.001124, 0.000567, 0.000236};
__attribute__ ((xcl_array_partition(complete, 1))) 
}


void conv2d_s2( global data_t *_input_image,
                int height,
                int width
            )
{
__local data_t filter_coef[FLEN2*FLEN2] = {0.000462, 0.000791, 0.001228, 0.001728, 0.002206, 0.002553, 0.002681, 0.002553, 0.002206, 0.001728, 0.001228, 0.000791, 0.000462,
					   0.000791, 0.001353, 0.002100, 0.002956, 0.003774, 0.004369, 0.004588, 0.004369, 0.003774, 0.002956, 0.002100, 0.001353, 0.000791,
					   0.001228, 0.002100, 0.003260, 0.004588, 0.005856, 0.006780, 0.007119, 0.006780, 0.005856, 0.004588, 0.003260, 0.002100, 0.001228,
					   0.001728, 0.002956, 0.004588, 0.006457, 0.008243, 0.009543, 0.010020, 0.009543, 0.008243, 0.006457, 0.004588, 0.002956, 0.001728,
					   0.002206, 0.003774, 0.005856, 0.008243, 0.010522, 0.012182, 0.012791, 0.012182, 0.010522, 0.008243, 0.005856, 0.003774, 0.002206,
					   0.002553, 0.004369, 0.006780, 0.009543, 0.012182, 0.014104, 0.014809, 0.014104, 0.012182, 0.009543, 0.006780, 0.004369, 0.002553,
					   0.002681, 0.004588, 0.007119, 0.010020, 0.012791, 0.014809, 0.015550, 0.014809, 0.012791, 0.010020, 0.007119, 0.004588, 0.002681,
					   0.002553, 0.004369, 0.006780, 0.009543, 0.012182, 0.014104, 0.014809, 0.014104, 0.012182, 0.009543, 0.006780, 0.004369, 0.002553,
					   0.002206, 0.003774, 0.005856, 0.008243, 0.010522, 0.012182, 0.012791, 0.012182, 0.010522, 0.008243, 0.005856, 0.003774, 0.002206,
					   0.001728, 0.002956, 0.004588, 0.006457, 0.008243, 0.009543, 0.010020, 0.009543, 0.008243, 0.006457, 0.004588, 0.002956, 0.001728,
					   0.001228, 0.002100, 0.003260, 0.004588, 0.005856, 0.006780, 0.007119, 0.006780, 0.005856, 0.004588, 0.003260, 0.002100, 0.001228,
					   0.000791, 0.001353, 0.002100, 0.002956, 0.003774, 0.004369, 0.004588, 0.004369, 0.003774, 0.002956, 0.002100, 0.001353, 0.000791,
					   0.000462, 0.000791, 0.001228, 0.001728, 0.002206, 0.002553, 0.002681, 0.002553, 0.002206, 0.001728, 0.001228, 0.000791, 0.000462};
__attribute__ ((xcl_array_partition(complete, 1))) 
}

void conv2d_s3( global data_t *_input_image,
                int height,
                int width
            )
{
__local data_t filter_coef[FLEN3*FLEN3] = {0.000711, 0.000976, 0.001277, 0.001590, 0.001887, 0.002132, 0.002294, 0.002351, 0.002294, 0.002132, 0.001887, 0.001590, 0.001277, 0.000976, 0.000711,
					   0.000976, 0.001341, 0.001754, 0.002185, 0.002592, 0.002928, 0.003151, 0.003229, 0.003151, 0.002928, 0.002592, 0.002185, 0.001754, 0.001341, 0.000976,
					   0.001277, 0.001754, 0.002294, 0.002858, 0.003390, 0.003830, 0.004121, 0.004223, 0.004121, 0.003830, 0.003390, 0.002858, 0.002294, 0.001754, 0.001277,
					   0.001590, 0.002185, 0.002858, 0.003560, 0.004223, 0.004771, 0.005134, 0.005261, 0.005134, 0.004771, 0.004223, 0.003560, 0.002858, 0.002185, 0.001590,
					   0.001887, 0.002592, 0.003390, 0.004223, 0.005010, 0.005661, 0.006091, 0.006241, 0.006091, 0.005661, 0.005010, 0.004223, 0.003390, 0.002592, 0.001887,
					   0.002132, 0.002928, 0.003830, 0.004771, 0.005661, 0.006396, 0.006882, 0.007052, 0.006882, 0.006396, 0.005661, 0.004771, 0.003830, 0.002928, 0.002132,
					   0.002294, 0.003151, 0.004121, 0.005134, 0.006091, 0.006882, 0.007405, 0.007588, 0.007405, 0.006882, 0.006091, 0.005134, 0.004121, 0.003151, 0.002294,
					   0.002351, 0.003229, 0.004223, 0.005261, 0.006241, 0.007052, 0.007588, 0.007775, 0.007588, 0.007052, 0.006241, 0.005261, 0.004223, 0.003229, 0.002351,
					   0.002294, 0.003151, 0.004121, 0.005134, 0.006091, 0.006882, 0.007405, 0.007588, 0.007405, 0.006882, 0.006091, 0.005134, 0.004121, 0.003151, 0.002294,
					   0.002132, 0.002928, 0.003830, 0.004771, 0.005661, 0.006396, 0.006882, 0.007052, 0.006882, 0.006396, 0.005661, 0.004771, 0.003830, 0.002928, 0.002132,
					   0.001887, 0.002592, 0.003390, 0.004223, 0.005010, 0.005661, 0.006091, 0.006241, 0.006091, 0.005661, 0.005010, 0.004223, 0.003390, 0.002592, 0.001887,
					   0.001590, 0.002185, 0.002858, 0.003560, 0.004223, 0.004771, 0.005134, 0.005261, 0.005134, 0.004771, 0.004223, 0.003560, 0.002858, 0.002185, 0.001590,
					   0.001277, 0.001754, 0.002294, 0.002858, 0.003390, 0.003830, 0.004121, 0.004223, 0.004121, 0.003830, 0.003390, 0.002858, 0.002294, 0.001754, 0.001277,
					   0.000976, 0.001341, 0.001754, 0.002185, 0.002592, 0.002928, 0.003151, 0.003229, 0.003151, 0.002928, 0.002592, 0.002185, 0.001754, 0.001341, 0.000976,
					   0.000711, 0.000976, 0.001277, 0.001590, 0.001887, 0.002132, 0.002294, 0.002351, 0.002294, 0.002132, 0.001887, 0.001590, 0.001277, 0.000976, 0.000711};
__attribute__ ((xcl_array_partition(complete, 1))) 
}

void conv2d_s4( global data_t *_input_image,
                int height,
                int width
            )
{
__local data_t filter_coef[FLEN4*FLEN4] = {0.000338, 0.000427, 0.000525, 0.000631, 0.000739, 0.000845, 0.000943, 0.001028, 0.001092, 0.001133, 0.001147, 0.001133, 0.001092, 0.001028, 0.000943, 0.000845, 0.000739, 0.000631, 0.000525, 0.000427, 0.000338,
					   0.000427, 0.000538, 0.000662, 0.000795, 0.000932, 0.001066, 0.001190, 0.001296, 0.001377, 0.001429, 0.001446, 0.001429, 0.001377, 0.001296, 0.001190, 0.001066, 0.000932, 0.000795, 0.000662, 0.000538, 0.000427,
					   0.000525, 0.000662, 0.000815, 0.000979, 0.001147, 0.001312, 0.001464, 0.001595, 0.001695, 0.001758, 0.001780, 0.001758, 0.001695, 0.001595, 0.001464, 0.001312, 0.001147, 0.000979, 0.000815, 0.000662, 0.000525,
					   0.000631, 0.000795, 0.000979, 0.001175, 0.001377, 0.001575, 0.001758, 0.001915, 0.002036, 0.002112, 0.002138, 0.002112, 0.002036, 0.001915, 0.001758, 0.001575, 0.001377, 0.001175, 0.000979, 0.000795, 0.000631,
					   0.000739, 0.000932, 0.001147, 0.001377, 0.001614, 0.001846, 0.002061, 0.002244, 0.002386, 0.002475, 0.002505, 0.002475, 0.002386, 0.002244, 0.002061, 0.001846, 0.001614, 0.001377, 0.001147, 0.000932, 0.000739,
					   0.000845, 0.001066, 0.001312, 0.001575, 0.001846, 0.002112, 0.002357, 0.002567, 0.002729, 0.002830, 0.002865, 0.002830, 0.002729, 0.002567, 0.002357, 0.002112, 0.001846, 0.001575, 0.001312, 0.001066, 0.000845,
					   0.000943, 0.001190, 0.001464, 0.001758, 0.002061, 0.002357, 0.002630, 0.002865, 0.003045, 0.003159, 0.003198, 0.003159, 0.003045, 0.002865, 0.002630, 0.002357, 0.002061, 0.001758, 0.001464, 0.001190, 0.000943,
					   0.001028, 0.001296, 0.001595, 0.001915, 0.002244, 0.002567, 0.002865, 0.003121, 0.003317, 0.003441, 0.003483, 0.003441, 0.003317, 0.003121, 0.002865, 0.002567, 0.002244, 0.001915, 0.001595, 0.001296, 0.001028,
					   0.001092, 0.001377, 0.001695, 0.002036, 0.002386, 0.002729, 0.003045, 0.003317, 0.003526, 0.003657, 0.003702, 0.003657, 0.003526, 0.003317, 0.003045, 0.002729, 0.002386, 0.002036, 0.001695, 0.001377, 0.001092,
					   0.001133, 0.001429, 0.001758, 0.002112, 0.002475, 0.002830, 0.003159, 0.003441, 0.003657, 0.003794, 0.003840, 0.003794, 0.003657, 0.003441, 0.003159, 0.002830, 0.002475, 0.002112, 0.001758, 0.001429, 0.001133,
					   0.001147, 0.001446, 0.001780, 0.002138, 0.002505, 0.002865, 0.003198, 0.003483, 0.003702, 0.003840, 0.003888, 0.003840, 0.003702, 0.003483, 0.003198, 0.002865, 0.002505, 0.002138, 0.001780, 0.001446, 0.001147,
					   0.001133, 0.001429, 0.001758, 0.002112, 0.002475, 0.002830, 0.003159, 0.003441, 0.003657, 0.003794, 0.003840, 0.003794, 0.003657, 0.003441, 0.003159, 0.002830, 0.002475, 0.002112, 0.001758, 0.001429, 0.001133,
					   0.001092, 0.001377, 0.001695, 0.002036, 0.002386, 0.002729, 0.003045, 0.003317, 0.003526, 0.003657, 0.003702, 0.003657, 0.003526, 0.003317, 0.003045, 0.002729, 0.002386, 0.002036, 0.001695, 0.001377, 0.001092,
					   0.001028, 0.001296, 0.001595, 0.001915, 0.002244, 0.002567, 0.002865, 0.003121, 0.003317, 0.003441, 0.003483, 0.003441, 0.003317, 0.003121, 0.002865, 0.002567, 0.002244, 0.001915, 0.001595, 0.001296, 0.001028,
					   0.000943, 0.001190, 0.001464, 0.001758, 0.002061, 0.002357, 0.002630, 0.002865, 0.003045, 0.003159, 0.003198, 0.003159, 0.003045, 0.002865, 0.002630, 0.002357, 0.002061, 0.001758, 0.001464, 0.001190, 0.000943,
					   0.000845, 0.001066, 0.001312, 0.001575, 0.001846, 0.002112, 0.002357, 0.002567, 0.002729, 0.002830, 0.002865, 0.002830, 0.002729, 0.002567, 0.002357, 0.002112, 0.001846, 0.001575, 0.001312, 0.001066, 0.000845,
					   0.000739, 0.000932, 0.001147, 0.001377, 0.001614, 0.001846, 0.002061, 0.002244, 0.002386, 0.002475, 0.002505, 0.002475, 0.002386, 0.002244, 0.002061, 0.001846, 0.001614, 0.001377, 0.001147, 0.000932, 0.000739,
					   0.000631, 0.000795, 0.000979, 0.001175, 0.001377, 0.001575, 0.001758, 0.001915, 0.002036, 0.002112, 0.002138, 0.002112, 0.002036, 0.001915, 0.001758, 0.001575, 0.001377, 0.001175, 0.000979, 0.000795, 0.000631,
					   0.000525, 0.000662, 0.000815, 0.000979, 0.001147, 0.001312, 0.001464, 0.001595, 0.001695, 0.001758, 0.001780, 0.001758, 0.001695, 0.001595, 0.001464, 0.001312, 0.001147, 0.000979, 0.000815, 0.000662, 0.000525,
					   0.000427, 0.000538, 0.000662, 0.000795, 0.000932, 0.001066, 0.001190, 0.001296, 0.001377, 0.001429, 0.001446, 0.001429, 0.001377, 0.001296, 0.001190, 0.001066, 0.000932, 0.000795, 0.000662, 0.000538, 0.000427,
					   0.000338, 0.000427, 0.000525, 0.000631, 0.000739, 0.000845, 0.000943, 0.001028, 0.001092, 0.001133, 0.001147, 0.001133, 0.001092, 0.001028, 0.000943, 0.000845, 0.000739, 0.000631, 0.000525, 0.000427, 0.000338};
__attribute__ ((xcl_array_partition(complete, 1))) 
}

// This module will resize image store in _intm_image by half and save to _input_image
void resize(global data_t* _input_image, int height, int width){
	int idx_x = 0;
	int idx_y = 0;
	RESIZE_OUTER_LOOP: for(int i=0; i<width;i++){
		RESIZE_INNER_LOOP: for(int j=0; j<height; j++){
			_input_image[j*width + i] =  _intm_image[idx_x*(2*width) + idx_y];
			idx_y += 2;
		}
		idx_x += 2; 
	}
}
